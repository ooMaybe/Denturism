/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.karam.dentistry.schedules;

import com.karam.dentistry.Main;
import com.karam.dentistry.data.Patient;
import com.karam.dentistry.schedules.appointments.Appointment;
import java.awt.Color;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

public class Calender extends javax.swing.JPanel {

    /**
     * Creates new form Calender
     */
    
    private java.util.Calendar calendar;
    private int year;
    private int month;
    private int day;
    
    private String selectedButton;
    
    public Calender() {
        initComponents();
        calendar = Calendar.getInstance();
        calendar.setTime(new Date());
        
        year = calendar.get(Calendar.YEAR);
        month = calendar.get(Calendar.MONTH);
        day = calendar.get(Calendar.DAY_OF_MONTH);
        
        selectedButton = "Month";
        
        calendarTable.setCellSelectionEnabled(true);
        calendarTable.setDefaultEditor(Object.class, null); // makes it so that I cannot edit a cell
        calendarTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
         
        calendarTable.getTableHeader().setReorderingAllowed(false);
        calendarTable.getColumnModel().setColumnSelectionAllowed(true);
        
        // when a cell is selected handle the "event"
        calendarTable.getSelectionModel().addListSelectionListener(e -> handleSelectionChange());
        
        //this one ensures that if I swap columns it also updates instead of just when I swap rows
        calendarTable.getColumnModel().getSelectionModel().addListSelectionListener(e -> handleSelectionChange());
        
        format();
    }
    
    private void handleSelectionChange() {
        int selectedRow = calendarTable.getSelectedRow();
        int selectedColumn = calendarTable.getSelectedColumn();

        if (selectedRow != -1 && selectedColumn != -1) { // Ensure a valid selection
            Object value = calendarTable.getValueAt(selectedRow, selectedColumn);
            
            Main.getInstance().getSchedule().setLastSelectedColumn(selectedColumn);
            Main.getInstance().getSchedule().setLastSelectedRow(selectedRow);
            Main.getInstance().getSchedule().updateAppointmentPanel(calendar, value);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nextLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        dateLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        weekButton = new javax.swing.JButton();
        monthButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        calendarTable = new javax.swing.JTable();

        nextLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 24)); // NOI18N
        nextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        dateLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        dateLabel.setText("DAY - MONTH - YEAR");

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/karam/dentistry/images/arrow.png"))); // NOI18N
        backButton.setAlignmentX(0.5F);
        backButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        backButton.setMaximumSize(new java.awt.Dimension(28, 28));
        backButton.setMinimumSize(new java.awt.Dimension(28, 28));
        backButton.setPreferredSize(new java.awt.Dimension(28, 28));
        backButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backButtonMouseClicked(evt);
            }
        });

        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/karam/dentistry/images/right_arrow.png"))); // NOI18N
        nextButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextButtonMouseClicked(evt);
            }
        });

        weekButton.setBackground(new java.awt.Color(150, 50, 100));
        weekButton.setFont(new java.awt.Font("Tw Cen MT", 1, 12)); // NOI18N
        weekButton.setForeground(java.awt.Color.white);
        weekButton.setText("WEEK");
        weekButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weekButtonMouseClicked(evt);
            }
        });

        monthButton.setBackground(new java.awt.Color(60, 30, 30));
        monthButton.setFont(new java.awt.Font("Tw Cen MT", 1, 12)); // NOI18N
        monthButton.setForeground(java.awt.Color.white);
        monthButton.setText("MONTH");
        monthButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                monthButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(weekButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(monthButton)
                .addGap(169, 169, 169)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(11, 11, 11)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(monthButton)
                                .addComponent(weekButton)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(dateLabel))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        calendarTable.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        calendarTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        calendarTable.setAlignmentY(0.0F);
        calendarTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        calendarTable.setRowHeight(50);
        calendarTable.setRowSelectionAllowed(false);
        calendarTable.setShowGrid(true);
        calendarTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(calendarTable);
        calendarTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (calendarTable.getColumnModel().getColumnCount() > 0) {
            calendarTable.getColumnModel().getColumn(0).setResizable(false);
            calendarTable.getColumnModel().getColumn(1).setResizable(false);
            calendarTable.getColumnModel().getColumn(2).setResizable(false);
            calendarTable.getColumnModel().getColumn(3).setResizable(false);
            calendarTable.getColumnModel().getColumn(4).setResizable(false);
            calendarTable.getColumnModel().getColumn(5).setResizable(false);
            calendarTable.getColumnModel().getColumn(6).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextButtonMouseClicked
        if (selectedButton.equals("Week")){
            day += 7;
            if (day >= calendar.getActualMaximum(Calendar.DAY_OF_MONTH)){
                month += 1;
                day = 0;
            }
        }else if (selectedButton.equals("Month")){
            month += 1;
            if (month > 11) { 
                month = 0; // Reset to January
                year++; // Increase year
            }
        }
        // Makes sure that that daay doesnt exceed possible days in a month (EX: 28 in feb or 31 in march)
        day = Math.min(day, calendar.getActualMaximum(Calendar.DAY_OF_MONTH));
        format();
    }//GEN-LAST:event_nextButtonMouseClicked

    private void backButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseClicked
        if (selectedButton.equals("Week")){
            day -= 7;
        }else if (selectedButton.equals("Month")){
            month -= 1;
            if (month < 0) { 
                month = 12; // Reset to January
                year--; // Increase year
            }
        }
        
        calendar.set(Calendar.YEAR, year);
        calendar.set(Calendar.MONTH, month);
        calendar.set(Calendar.DAY_OF_MONTH, 1);
        // Makes sure that that daay doesnt exceed possible days in a month (EX: 28 in feb or 31 in march)
        day = Math.min(day, calendar.getActualMaximum(Calendar.DAY_OF_MONTH));
        format();
    }//GEN-LAST:event_backButtonMouseClicked

   
    private void weekButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weekButtonMouseClicked
        selectedButton = "Week";
        updateButtons();
    }//GEN-LAST:event_weekButtonMouseClicked

    private void monthButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthButtonMouseClicked
        selectedButton = "Month";
        updateButtons();
    }//GEN-LAST:event_monthButtonMouseClicked

    private void updateButtons(){
        Color unselected = new Color(150,50,100);
        Color selected = new Color(60,30,30);
        
        weekButton.setBackground(selectedButton.equals("Week") ? selected : unselected);
        monthButton.setBackground(selectedButton.equals("Month") ? selected : unselected);
        
        // TODO: update calenders from here aswell
        format();
    }
    
    public void format(){
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.YEAR, year);
        calendar.set(Calendar.MONTH, month);
        calendar.set(Calendar.DAY_OF_MONTH, day);
        
        DefaultTableModel model = (DefaultTableModel) calendarTable.getModel();
        SimpleDateFormat sdf;
        
        switch(selectedButton){    
            case "Month":
                calendar.set(Calendar.DAY_OF_MONTH, 1); // First day of the month
                
                int daysInMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                int firstDayOfWeek = calendar.get(Calendar.DAY_OF_WEEK) - 1; // Convert to 0-indexed

                sdf = new SimpleDateFormat("MMMM-yyyy");
                dateLabel.setText(sdf.format(calendar.getTime()));   

                model.setRowCount(6); // 6 rows max
                model.setColumnCount(7); // 7 columns (days)

                int dayCounter = 1;

                for (int row = 0; row < 6; row++) {
                    for (int column = 0; column < 7; column++) {
                        if (row == 0 && column < firstDayOfWeek) {
                            // empty cells before the first day
                            model.setValueAt("", row, column);
                        } else if (dayCounter <= daysInMonth) {
                            StringBuilder cellContent = new StringBuilder();
                            cellContent.append("<html>");
                            // checks if today's date matches with the calendar object's date, if so make the cell yellow indicating today's day, otherwise leave it bolded
                            if (dayCounter == day && month == Calendar.getInstance().get(Calendar.MONTH)) {
                                cellContent.append("<b><span style='background-color:yellow;'>" + dayCounter + "</span></b>");
                            } else {
                                cellContent.append("<b>" + dayCounter + "</b>");
                            }
                            cellContent.append("</html>");
                
                            model.setValueAt(cellContent.toString(), row, column);
                            dayCounter++;
                        } else {
                            // empty after last day
                            model.setValueAt("", row, column);
                        }
                    }
                }
                break;
            case "Week":
                // Find the first day of the current week (Sunday)
                int currentDayOfWeek = calendar.get(Calendar.DAY_OF_WEEK) - 1; // 0-indexed (Sunday = 0)
                calendar.add(Calendar.DAY_OF_MONTH, -currentDayOfWeek); // Move to Sunday

                // Update the date label to show the week's range
                SimpleDateFormat weekSdf = new SimpleDateFormat("dd MMM YYYY");
                Calendar endOfWeek = (Calendar) calendar.clone();
                endOfWeek.add(Calendar.DAY_OF_MONTH, 6);
                dateLabel.setText(weekSdf.format(calendar.getTime()) + " - " + weekSdf.format(endOfWeek.getTime()));

                model.setRowCount(1); // Single row
                model.setColumnCount(7); // 7 days

                for (int i = 0; i < 7; i++) {
                    int weekDay = calendar.get(Calendar.DAY_OF_MONTH);
                    int weekMonth = calendar.get(Calendar.MONTH);

                    // Highlight today's date in week mode
                    if (weekDay == day && weekMonth == month && year == Calendar.getInstance().get(Calendar.YEAR)) {
                        model.setValueAt("<html><b><span style='background-color:yellow;'>" + weekDay + "</span></b></html>", 0, i);
                    } else {
                        model.setValueAt("<html><b>" + weekDay + "</b></html>", 0, i);
                    }

                    calendar.add(Calendar.DAY_OF_MONTH, 1); // Move to next day
                }
                break;
        }
        
    }
    
    public JTable getCalendarTable(){
        return calendarTable;
    }

    public Calendar getCalendarObject() {
        return calendar;
    }
    
    public String getButton(){
        return selectedButton;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JTable calendarTable;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton monthButton;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel nextLabel;
    private javax.swing.JButton weekButton;
    // End of variables declaration//GEN-END:variables
}
